package hello;

import hello.api.*;
import hello.dao.ProductRepository;
import hello.dao.UserRepository;
import hello.dao.pojo.Notice;
import hello.pojo.*;
import hello.service.BannerService;
import hello.service.ProductService;
import hello.utils.MainUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;


// 这个就是专门用来做webservice使用的，直接输入JSON结果，用来做服务端的接口交互使用。

@Controller
public class ProductController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @Autowired
    private BannerService bannerService;

    @Autowired
    private ProductService productService;

    @RequestMapping("/greeting")
    public String greeting(@RequestParam(value = "name", required = false, defaultValue = "World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }


    @RequestMapping("/greetingall")
    public String greetingall(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "greetingall";
    }

    @RequestMapping("/index.html")
    public String index(Model model) {
        model.addAttribute("users", userRepository.findAll());
        model.addAttribute("bannerList", bannerService.findAll());
        buildFeaturedProducts(model, "New Arrival", "newArrivalProducts");
        buildFeaturedProducts(model, "Hot Product", "hotProducts");
        return "index";
    }


    private void buildFeaturedProducts(Model model, String promotionName, String result) {
        HashMap<String, String> newArrivalMap = new HashMap<>();
        newArrivalMap.put("target_language", "en");
        newArrivalMap.put("target_currency", "usd");
        newArrivalMap.put("page_no", "0");
        newArrivalMap.put("promotion_name", promotionName);

        FeaturedPromoProductGetAPI featuredPromoProductGetAPI = new FeaturedPromoProductGetAPI();
        featuredPromoProductGetAPI.setIsPostRequest(true);
        featuredPromoProductGetAPI.setNeedAopSignature();
        newArrivalMap.put("method", "aliexpress.affiliate.featuredpromo.products.get");
        featuredPromoProductGetAPI.setParamMap(newArrivalMap);
        try {
            String response = featuredPromoProductGetAPI.request();
            AliexpressAffiliateFeaturedpromoProductsGetResponse aliexpressAffiliateFeaturedpromoProductsGetResponse = FeaturedPromoProductGetAPI.getResult(response);
            model.addAttribute(result, aliexpressAffiliateFeaturedpromoProductsGetResponse.getRespResult().getResult().products.product);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @RequestMapping("/queryById")
    public String queryById(@RequestParam Integer userId, Model model) {
        //model.addAttribute("uuu", userRepository.findOne(new Long(userId)));
        return "queryById";
    }


    @RequestMapping("/getProduct")
    public String getProduct(@RequestParam String productId, Model model) {
        AFFProductDetailGetAPI affProductDetailGetAPI = new AFFProductDetailGetAPI();
        affProductDetailGetAPI.setIsPostRequest(true);
        HashMap<String, String> paramMap = new HashMap<>();
        paramMap.put("method", "aliexpress.affiliate.productdetail.get");
        paramMap.put("product_ids", productId);
        paramMap.put("fields", "productId,productTitle,productUrl,imageUrl,originalPrice,salePrice,discount,evaluateScore,30daysCommission,volume,packageType,lotNum,validTime,storeName,storeUrl,allImageUrls");
        affProductDetailGetAPI.setParamMap(paramMap);
        try {
            String result = affProductDetailGetAPI.request();
            AliexpressAffiliateProductdetailGetResponse response = AFFProductDetailGetAPI.getResult(result);
            Product product = response.getRespResult().getResult().products.product.get(0);
            model.addAttribute("product", product);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "getProduct";
    }


    @RequestMapping("/queryByFirstName")
    public String queryByFirstName(@RequestParam String firstName, Model model) {
        model.addAttribute("users", userRepository.findByFirstNameEndsWith(firstName));
        return "queryByFirstName";
    }


    @RequestMapping("/findByEmail")
    public String findByEmail(@RequestParam String email, Model model) {
        model.addAttribute("user", userRepository.findByEmailAddress(email));
        return "findByEmail";
    }


    @RequestMapping("/product.html")
    public String detail(@RequestParam String productId, Model model) {
        queryProductById(productId, model);
        return "product";
    }

    private String queryProductById(String productId, Model model) {
        Map<String, String> productParamsMap = new HashMap<>();
        AFFProductDetailGetAPI affProductDetailGetAPI = new AFFProductDetailGetAPI();
        affProductDetailGetAPI.setNeedAopSignature();
        affProductDetailGetAPI.setIsPostRequest(true);
        productParamsMap.put("method", "aliexpress.affiliate.productdetail.get");
        productParamsMap.put("product_ids", productId);
        String localCurrency = "USD";
        String language = "en";
        productParamsMap.put("target_currency", localCurrency);
        productParamsMap.put("target_language", language);
        productParamsMap.put("fields", "productId,productTitle,productUrl,imageUrl,originalPrice,salePrice,discount,evaluateScore,30daysCommission,volume,packageType,lotNum,validTime,storeName,storeUrl,allImageUrls");

        affProductDetailGetAPI.setParamMap(productParamsMap);

        affProductDetailGetAPI.setParamMap(productParamsMap);
        try {
            String response = affProductDetailGetAPI.request();

            AliexpressAffiliateProductdetailGetResponse productdetailGetResponse = AFFProductDetailGetAPI.getResult(response);
            if (productdetailGetResponse != null && productdetailGetResponse.getRespResult() != null && productdetailGetResponse.getRespResult().getRespCode() == 200) {
                model.addAttribute("product", productdetailGetResponse.getRespResult().getResult().products.product.get(0));
            } else {
                Notice notice = new Notice();
                notice.message = "Product not found.";
                model.addAttribute("message", notice);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        SmartMatchAPI smartMatchAPI = new SmartMatchAPI();
        smartMatchAPI.setIsPostRequest(true);
        smartMatchAPI.setNeedAopSignature();
        HashMap<String, String> sparamMap = new HashMap<String, String>();
        sparamMap.put("method", "aliexpress.affiliate.product.smartmatch");
        // Must have filed
        sparamMap.put("device_id", "null");
        sparamMap.put("tracking_id", AFFBaseAPI.TRACKING_ID);
        // can be empty
        sparamMap.put("product_id", productId);
        sparamMap.put("device", "{}");
        sparamMap.put("site", "{}");
        sparamMap.put("app", "{}");
        sparamMap.put("user", "{}");
        sparamMap.put("target_currency", "USD");
        sparamMap.put("target_language", "en");
        smartMatchAPI.setParamMap(sparamMap);
        try {
            String response = smartMatchAPI.request();
            AliexpressAffiliateProductSmartmatchResponse aliexpressAffiliateProductSmartmatchResponse = SmartMatchAPI.getResult(response);
            if (aliexpressAffiliateProductSmartmatchResponse != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult() != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult().getRespCode() == 200) {
                model.addAttribute("smartMatchProductList", aliexpressAffiliateProductSmartmatchResponse.getRespResult().getResult().products.product.subList(0, 16));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        return null;
    }


    @RequestMapping("/search.html")
    public String queryProductDetailBySearch(@RequestParam String keywords, @RequestParam int pageNo, Model model) {
        AFFProductQueryAPI affProductQueryAPI = new AFFProductQueryAPI();
        affProductQueryAPI.setIsPostRequest(true);
        affProductQueryAPI.setNeedAopSignature();
        HashMap<String, String> paramMap = new HashMap<String, String>();
        paramMap.put("fields",
                "totalResults,lotNum,packageType,imageUrl,volume,productId,discount,validTime,originalPrice,productTitle,productUrl,salePrice,commission");
        paramMap.put("keywords", keywords);
        // 类目
        paramMap.put("category_ids", "");
        paramMap.put("min_sale_price", "");
        paramMap.put("max_sale_price", "");
        paramMap.put("page_no", pageNo + "");
        // orignalPriceUp, orignalPriceDown, sellerRateDown, commissionRateUp, commissionRateDown, volumeDown,
        // validTimeUp, validTimeDown
        paramMap.put("sort", "");
        paramMap.put("method", "aliexpress.affiliate.product.query");
        affProductQueryAPI.setParamMap(paramMap);
        try {
            String response = affProductQueryAPI.request();
            AliexpressAffiliateProductQueryResponse aliexpressAffiliateProductQueryResponse = AFFProductQueryAPI.getResult(response);

            model.addAttribute("trafficProductResultDto", aliexpressAffiliateProductQueryResponse.getRespResult().getResult());
            model.addAttribute("keywords", keywords);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "search";
    }


}