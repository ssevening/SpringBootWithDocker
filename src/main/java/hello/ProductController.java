package hello;

import hello.api.*;
import hello.cache.MemCache;
import hello.dao.UserRepository;
import hello.dao.pojo.BannerInfo;
import hello.dao.pojo.Notice;
import hello.pojo.*;
import hello.service.BannerService;
import hello.service.CategoryService;
import hello.service.ProductService;
import hello.sitemap.SiteMapIndexUtils;
import hello.sitemap.SiteMapUtils;
import hello.utils.KeywordsUtils;
import hello.utils.StringUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


// 这个就是专门用来做webservice使用的，直接输入JSON结果，用来做服务端的接口交互使用。

@Controller
public class ProductController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @Autowired
    private BannerService bannerService;

    @Autowired
    private ProductService productService;

    @Autowired
    private CategoryService categoryService;

    @RequestMapping("/greeting")
    public String greeting(@RequestParam(value = "name", required = false, defaultValue = "World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }


    @RequestMapping("/greetingall")
    public String greetingall(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "greetingall";
    }

    @RequestMapping(value = {"/gtm.html"})
    // 为 GTM 测试添加的页面
    public String gtm(Model model) {
        return "gtm";
    }


    @RequestMapping(value = {"/optimize.html"})
    // 为 optimize 测试添加的页面
    public String optimize(Model model) {
        return "optimize";
    }


    @RequestMapping(value = {"/optimizeb.html"})
    // 为 optimize 测试添加的页面
    public String optimizeb(Model model) {
        return "optimizeb";
    }

    @RequestMapping(value = {"/optimizec.html"})
    // 为 optimize 测试添加的页面
    public String optimizec(Model model) {
        return "optimizec";
    }

    @RequestMapping(value = {"/index.html", "/"})
    public String index(Model model, @CookieValue(value = "sPid", required = false) String sPid) {
        List<BannerInfo> bannerInfoList = (List<BannerInfo>) MemCache.getInstance().get("bannerList");
        if (bannerInfoList == null) {
            bannerInfoList = bannerService.findAll();
            MemCache.getInstance().put("bannerList", bannerInfoList);
        }

        model.addAttribute("bannerList", bannerInfoList);

        buildFeaturedProducts(model, "Hot Product", "hotProducts", "0");

        AFFSmartMatchAPI smartMatchAPI = new AFFSmartMatchAPI();
        smartMatchAPI.setIsPostRequest(true);
        smartMatchAPI.setNeedAopSignature();
        HashMap<String, String> sparamMap = new HashMap<String, String>();
        sparamMap.put("method", "aliexpress.affiliate.product.smartmatch");
        // Must have filed
        sparamMap.put("device_id", "null");
        sparamMap.put("tracking_id", AFFBaseAPI.TRACKING_ID);
        // can be empty
        if (sPid != null) {
            sparamMap.put("product_id", sPid);
        }

        sparamMap.put("device", "{}");
        sparamMap.put("site", "{}");
        sparamMap.put("app", "{}");
        sparamMap.put("user", "{}");
        sparamMap.put("target_currency", "USD");
        sparamMap.put("target_language", "en");
        smartMatchAPI.setParamMap(sparamMap);
        List<Product> smartMatchProductList = new ArrayList<>();
        try {
            String response = smartMatchAPI.request();
            AliexpressAffiliateProductSmartmatchResponse aliexpressAffiliateProductSmartmatchResponse = AFFSmartMatchAPI.getResult(response);
            if (aliexpressAffiliateProductSmartmatchResponse != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult() != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult().getRespCode() == 200) {
                smartMatchProductList = aliexpressAffiliateProductSmartmatchResponse.getRespResult().getResult().getProducts();
            }
            model.addAttribute("smartMatchProductList", smartMatchProductList.subList(0, 12));
        } catch (Exception e) {
            e.printStackTrace();
        }

        model.addAttribute("userId", "ssevening");
        return "index";
    }


    @RequestMapping("/featuredProducts.html")
    public String FeaturedProducts(Model model, String promotionName, @RequestParam(defaultValue = "1", required = false) int pageNo) {
        buildFeaturedProducts(model, promotionName, "promotionProductList", pageNo + "");
        model.addAttribute("promotionName", promotionName);
        model.addAttribute("pageNo", pageNo);
        return "featuredProducts";
    }


    @RequestMapping("/smartProducts.html")
    public String smartProducts(Model model, @RequestParam(defaultValue = "1", required = false) int pageNo, @CookieValue(value = "sPid", required = false) String sPid) {
        try {
            Map<String, Object> resultMap = AFFSmartMatchAPI.getFromNet("", pageNo);
            AliexpressAffiliateProductSmartmatchResponse response = (AliexpressAffiliateProductSmartmatchResponse) resultMap.get("result");
            if (response != null && response.getRespResult() != null && response.getRespResult().getRespCode() == 200) {
                model.addAttribute("smartProducts", response.getRespResult().getResult().getProducts());
                model.addAttribute("pageNo", pageNo);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "smartProducts";
    }


    private void buildFeaturedProducts(Model model, String promotionName, String result, String pageNo) {
        HashMap<String, String> newArrivalMap = new HashMap<>();
        newArrivalMap.put("target_language", "en");
        newArrivalMap.put("target_currency", "usd");
        newArrivalMap.put("page_no", pageNo);
        newArrivalMap.put("promotion_name", promotionName);

        AFFFeaturedPromoProductGetAPI featuredPromoProductGetAPI = new AFFFeaturedPromoProductGetAPI();
        featuredPromoProductGetAPI.setIsPostRequest(true);
        featuredPromoProductGetAPI.setNeedAopSignature();
        newArrivalMap.put("method", "aliexpress.affiliate.featuredpromo.products.get");
        featuredPromoProductGetAPI.setParamMap(newArrivalMap);
        try {
            List<Product> hotProductList = (List<Product>) MemCache.getInstance().get("hotProductList");
            if (hotProductList == null) {
                String response = featuredPromoProductGetAPI.request();
                AliexpressAffiliateFeaturedpromoProductsGetResponse aliexpressAffiliateFeaturedpromoProductsGetResponse = AFFFeaturedPromoProductGetAPI.getResult(response);
                if (aliexpressAffiliateFeaturedpromoProductsGetResponse.getRespResult() != null && aliexpressAffiliateFeaturedpromoProductsGetResponse.getRespResult().getResult() != null && aliexpressAffiliateFeaturedpromoProductsGetResponse.getRespResult().getResult().getProducts() != null) {
                    hotProductList = aliexpressAffiliateFeaturedpromoProductsGetResponse.getRespResult().getResult().getProducts().subList(0, 12);
                    MemCache.getInstance().put("hotProductList", hotProductList);
                }
            }

            model.addAttribute(result, hotProductList);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @RequestMapping("/queryById")
    public String queryById(@RequestParam Integer userId, Model model) {
        //model.addAttribute("uuu", userRepository.findOne(new Long(userId)));
        return "queryById";
    }


    @RequestMapping("/getProduct")
    public String getProduct(@RequestParam String id, Model model) {
        AFFProductDetailGetAPI affProductDetailGetAPI = new AFFProductDetailGetAPI();
        affProductDetailGetAPI.setIsPostRequest(true);
        HashMap<String, String> paramMap = new HashMap<>();
        paramMap.put("method", "aliexpress.affiliate.productdetail.get");
        paramMap.put("product_ids", id);
        paramMap.put("fields", "productId,productTitle,productUrl,imageUrl,originalPrice,salePrice,discount,evaluateScore,30daysCommission,volume,packageType,lotNum,validTime,storeName,storeUrl,allImageUrls");
        affProductDetailGetAPI.setParamMap(paramMap);
        try {
            String result = affProductDetailGetAPI.request();
            AliexpressAffiliateProductdetailGetResponse response = AFFProductDetailGetAPI.getResult(result);
            Product product = response.getRespResult().getResult().getProducts().get(0);
            model.addAttribute("product", product);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "getProduct";
    }


    @RequestMapping("/queryByFirstName")
    public String queryByFirstName(@RequestParam String firstName, Model model) {
        model.addAttribute("users", userRepository.findByFirstNameEndsWith(firstName));
        return "queryByFirstName";
    }


    @RequestMapping("/findByEmail")
    public String findByEmail(@RequestParam String email, Model model) {
        model.addAttribute("user", userRepository.findByEmailAddress(email));
        return "findByEmail";
    }

    private static final Logger logger = LoggerFactory.getLogger(ProductController.class);


    @RequestMapping("/product.html")
    public String detail(@RequestParam(required = false) String id, Model model, @RequestParam(required = false) String productId, HttpServletResponse response) {
        if (productId != null) {
            id = productId;
        }
        Cookie cookie = new Cookie("sPid", id);
        // 1小时，单位是秒
        cookie.setMaxAge(60 * 60);
        response.addCookie(cookie);
        queryProductById(id, model);
        return "product";
    }

    private String queryProductById(String productId, Model model) {
        Map<String, String> productParamsMap = new HashMap<>();
        AFFProductDetailGetAPI affProductDetailGetAPI = new AFFProductDetailGetAPI();
        affProductDetailGetAPI.setNeedAopSignature();
        affProductDetailGetAPI.setIsPostRequest(true);
        productParamsMap.put("method", "aliexpress.affiliate.productdetail.get");
        productParamsMap.put("product_ids", productId);
        String localCurrency = "USD";
        String language = "en";
        productParamsMap.put("target_currency", localCurrency);
        productParamsMap.put("target_language", language);
        productParamsMap.put("fields", "productId,productTitle,productUrl,imageUrl,originalPrice,salePrice,discount,evaluateScore,30daysCommission,volume,packageType,lotNum,validTime,storeName,storeUrl,allImageUrls");

        affProductDetailGetAPI.setParamMap(productParamsMap);

        Product product = new Product();
        try {
            if (MemCache.getInstance().get(productId) != null) {
                product = (Product) MemCache.getInstance().get(productId);
            } else {
                String response = affProductDetailGetAPI.request();
                AliexpressAffiliateProductdetailGetResponse productDetailGetResponse = AFFProductDetailGetAPI.getResult(response);
                if (productDetailGetResponse != null && productDetailGetResponse.getRespResult() != null && productDetailGetResponse.getRespResult().getRespCode() == 200 && productDetailGetResponse.getRespResult().getResult() != null && productDetailGetResponse.getRespResult().getResult().getProducts() != null) {
                    product = productDetailGetResponse.getRespResult().getResult().getProducts().get(0);
                    if (product != null) {
                        MemCache.getInstance().put(productId, product);
                    } else {
                        logger.debug("product return null" + response);
                    }
                }
            }

            model.addAttribute("product", product);
        } catch (Exception e) {
            e.printStackTrace();
        }


        AFFSmartMatchAPI smartMatchAPI = new AFFSmartMatchAPI();
        smartMatchAPI.setIsPostRequest(true);
        smartMatchAPI.setNeedAopSignature();
        HashMap<String, String> sparamMap = new HashMap<String, String>();
        sparamMap.put("method", "aliexpress.affiliate.product.smartmatch");
        // Must have filed
        sparamMap.put("device_id", "null");
        sparamMap.put("tracking_id", AFFBaseAPI.TRACKING_ID);
        // can be empty
        sparamMap.put("product_id", productId);
        sparamMap.put("device", "{}");
        sparamMap.put("site", "{}");
        sparamMap.put("app", "{}");
        sparamMap.put("user", "{}");
        sparamMap.put("target_currency", "USD");
        sparamMap.put("target_language", "en");
        smartMatchAPI.setParamMap(sparamMap);
        List<Product> smartMatchProductList = new ArrayList<>();
        try {
            if (MemCache.getInstance().get("smartResult_" + productId) != null) {
                smartMatchProductList = (List<Product>) MemCache.getInstance().get("smartResult_" + productId);
            } else {
                String response = smartMatchAPI.request();
                AliexpressAffiliateProductSmartmatchResponse aliexpressAffiliateProductSmartmatchResponse = AFFSmartMatchAPI.getResult(response);
                if (aliexpressAffiliateProductSmartmatchResponse != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult() != null && aliexpressAffiliateProductSmartmatchResponse.getRespResult().getRespCode() == 200) {
                    smartMatchProductList = aliexpressAffiliateProductSmartmatchResponse.getRespResult().getResult().getProducts();
                    MemCache.getInstance().put("smartResult_" + productId, smartMatchProductList);
                }
            }
            model.addAttribute("smartMatchProductList", smartMatchProductList);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // build seo info
        if (product != null) {
            StringBuffer longText = new StringBuffer();
            for (int i = 0; i < smartMatchProductList.size(); i++) {
                Product p = smartMatchProductList.get(i);
                longText.append(p.getProductTitle()).append(" ");
            }
            product.setKeywords(product.getFirstLevelCategoryName() + ","
                    + product.getSecondLevelCategoryName() + ","
                    + KeywordsUtils.getSEOKeywords(KeywordsUtils.getKeywordsFromLongText(longText.toString())));
        }
        return null;
    }

    @RequestMapping("/search.html")
    public String queryProductDetailBySearch(@RequestParam String keywords, @RequestParam(defaultValue = "1", required = false) int pageNo, @RequestParam(defaultValue = "", required = false) String sort, Model model) {
        try {
            AliexpressAffiliateProductQueryResponse aliexpressAffiliateProductQueryResponse = AFFProductQueryAPI.getFromNet(keywords, pageNo + "", sort);
            model.addAttribute("trafficProductResultDto", aliexpressAffiliateProductQueryResponse.getRespResult().getResult());
            model.addAttribute("keywords", keywords);

            if (aliexpressAffiliateProductQueryResponse.getRespResult() != null && aliexpressAffiliateProductQueryResponse.getRespResult().getResult() != null) {
                StringBuffer longText = new StringBuffer();
                List<Product> productList = aliexpressAffiliateProductQueryResponse.getRespResult().getResult().getProducts();
                for (int i = 0; i < productList.size(); i++) {
                    Product p = productList.get(i);
                    longText.append(p.getProductTitle()).append(" ");
                }


                model.addAttribute("seoKeywords", keywords + ","
                        + KeywordsUtils.getSEOKeywords(KeywordsUtils.getKeywordsFromLongText(longText.toString())));

                model.addAttribute("seoDescription", "");
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
        return "search";
    }

    // 展示类目导航页
    @RequestMapping("/category.html")
    public String category(Model model, @RequestParam(required = false) Long pid, @RequestParam(required = false) String pName) {
        try {
            List<Category> categoryList;
            if (MemCache.getInstance().get("categoryList") != null) {
                categoryList = (List<Category>) MemCache.getInstance().get("categoryList");
            } else {
                categoryList = categoryService.findAll();
                MemCache.getInstance().put("categoryList", categoryList);
            }

            List<Category> displayCategory = new ArrayList<>();
            // 这里处理显示的类目
            if (pid == null) {
                // 一级类目
                for (int i = 0; i < categoryList.size(); i++) {
                    Category c = categoryList.get(i);
                    if (c.getParentCategoryId() == null) {
                        displayCategory.add(c);
                    }
                }
            } else {
                for (int i = 0; i < categoryList.size(); i++) {
                    Category c = categoryList.get(i);
                    if (c.getParentCategoryId() != null && c.getParentCategoryId().equals(pid)) {
                        displayCategory.add(c);
                    }
                }
            }

            model.addAttribute("displayCategory", displayCategory);
            model.addAttribute("pName", pName);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "category";
    }

    // 展示类目导航页
    @RequestMapping("/categoryItem.html")
    public String categoryItems(@RequestParam Long categoryId, @RequestParam(defaultValue = "1", required = false) int pageNo, @RequestParam(defaultValue = "", required = false) String categoryName, Model model) {
        try {
            Map<String, Object> resultMap = AFFHotProductDownloadAPI.getFromNet(categoryId, pageNo + "");
            model.addAttribute("categoryProductList", ((AliexpressAffiliateHotproductDownloadResponse) resultMap.get("result")).getRespResult().getResult().getProducts());
            model.addAttribute("categoryId", categoryId);
            model.addAttribute("pageNo", pageNo);
            model.addAttribute("categoryName", StringUtil.formatStringInUrl(categoryName));
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "categoryItem";
    }

    @Autowired
    SiteMapUtils siteMapUtils;
    @Autowired
    SiteMapIndexUtils siteMapIndexUtils;

    @GetMapping(value = "/{path}/{pageNo}/sitemap.xml", produces = MediaType.APPLICATION_XML_VALUE)
    public @ResponseBody
    String getSiteMap(@PathVariable("path") String path, HttpServletResponse response, @PathVariable("pageNo") int pageNo) {
        switch (path) {
            case "product": {
                response.setCharacterEncoding("UTF-8");
                response.setContentType(MediaType.APPLICATION_XML_VALUE);
                return siteMapUtils.getProductSiteMap(pageNo);
            }
            default: {
                return "";
            }
        }
    }


    @GetMapping(value = "/{path}/{indexNo}/sitemap_index.xml", produces = MediaType.APPLICATION_XML_VALUE)
    public @ResponseBody
    String getSiteMapIndex(@PathVariable("path") String path, HttpServletResponse response, @PathVariable("indexNo") int indexNo) {
        switch (path) {
            case "product": {
                response.setCharacterEncoding("UTF-8");
                response.setContentType(MediaType.APPLICATION_XML_VALUE);
                return siteMapIndexUtils.getProductSiteMapIndex(indexNo);
            }
            default: {
                return "";
            }
        }
    }


    // 测试专用
//    @RequestMapping("/idata")
//    public @ResponseBody
//    String importProductData(Model model) {
//        System.out.println("start executeGetProductData.....");
//        try {
//            Map<String, Object> resultMap = AFFGetCategoryAPI.getFromNet();
//            AliexpressAffiliateCategoryGetResponse response = (AliexpressAffiliateCategoryGetResponse) resultMap.get("result");
//            List<Category> categoryList = response.getRespResult().getResult().getCategories();
//            for (int i = 0; i < categoryList.size(); i++) {
//                Category category = categoryList.get(i);
//                System.out.println(category.getCategoryName() + " data is getting.....");
//                for (int j = 0; j <= 100; j++) {
//                    Map<String, Object> downloadResultMap = AFFHotProductDownloadAPI.getFromNet(category.getCategoryId(), j + "");
//                    AliexpressAffiliateHotproductDownloadResponse downloadResponse = (AliexpressAffiliateHotproductDownloadResponse) downloadResultMap.get("result");
//                    if (downloadResponse.getRespResult() != null && downloadResponse.getRespResult().getResult() != null && downloadResponse.getRespResult().getRespCode() == 200) {
//                        List<Product> productList = downloadResponse.getRespResult().getResult().getProducts();
//                        if (productList != null && productList.size() > 0) {
//                            for (Product product : productList) {
//                                productService.save(product);
//                            }
//                        }
//                    } else {
//                        System.out.println(category.getCategoryName() + " get product list page:" + j + " is null");
//                        break;
//                    }
//                }
//                System.out.println("finished :" + category.getCategoryName() + " product data.");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        return "succ";
//    }

}